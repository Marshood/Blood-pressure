{"version":3,"sources":["view/components/Register/Register.js","view/components/MainPage/MainPage.js","view/components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Register","history","useHistory","className","type","id","placeholder","name","required","value","onClick","event","addUser","push","e","a","preventDefault","UserName","document","getElementById","UserMail","Password","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","log","success","alert","catch","error","Login","useState","testUseEffect","useEffect","onSubmit","systolic","target","diastolic","HeartRate","radio","gender","SaveToDB","htmlFor","DataForTable","setTDataForTable","res","onChange","getNewData","scope","map","index","key","Date","Time","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da15d32d.chunk.js","sourcesContent":["import React, { useEffect, useState, upvotes } from 'react';\r\nimport './Register.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    useHistory\r\n} from \"react-router-dom\"\r\n\r\nexport default function Register() {\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <div className='RegisterForm'>\r\n            <div className=\"divh1Register\">Register <br></br></div>\r\n            <div className=\"RegisterBox\">\r\n                <form >\r\n                    <div>\r\n\r\n                        <label ><b>Username:</b></label>\r\n                        <br></br>\r\n                        <input type=\"text\" id=\"UserName\" placeholder=\"Enter Username\" name=\"uname\" required />\r\n                    </div>\r\n                    <div>\r\n                        <label  ><b>Email:</b></label>\r\n                        <br></br>\r\n                        <input type=\"text\" id=\"UserMail\" placeholder=\"Enter email\" name=\"umail\" required />\r\n                    </div>\r\n                    <div>\r\n                        <label  ><b>Password:</b></label>\r\n                        <br></br>\r\n                        <input type=\"password\" id=\"Password\" placeholder=\"Enter Password\" name=\"psw\" required />\r\n                    </div>\r\n                    <br></br>\r\n                    <input className=\"button\" type=\"submit\" value=\"Register\" onClick={(event) => { addUser(event) }}></input>\r\n                    <button className=\"button\" type=\"\" value=\"Login\" onClick={() => {\r\n                        history.push('/Login')\r\n                    }}>Login</button>\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n    async function addUser(e) {\r\n        e.preventDefault();\r\n        const UserName =document.getElementById(\"UserName\").value;\r\n        const UserMail =document.getElementById(\"UserMail\").value;\r\n        const Password=document.getElementById(\"Password\").value;\r\n        // console.log(UserName, UserMail, Password)\r\n        await fetch(\"/AddUser\", {\r\n            method: \"PUT\",\r\n            body: JSON.stringify({\r\n                UserName:UserName ,\r\n                UserMail:UserMail,\r\n                Password:Password\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            console.log('SuccessRRRR:', data[0].success);\r\n            if (data[0].success) {//true\r\n                 \r\n                history.push('/Login');\r\n\r\n            }\r\n            else {\r\n                alert(\"User Exist in DB....\");\r\n             }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error);\r\n        });    \r\n    }\r\n\r\n}\r\n","import React, { useEffect, useState, upvotes } from 'react';\r\nimport './MainPage.css';\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useHistory\r\n} from \"react-router-dom\"\r\n\r\n\r\nexport default function Login() {\r\n    let history = useHistory();\r\n    const [testUseEffect, setTestUseEffect] = useState();\r\n    useEffect(() => {\r\n \r\n    }, [testUseEffect]);\r\n    return (\r\n        <body>\r\n            <div className='loginForm'>\r\n                <div className=\"divh1\">Blood pressure<br></br></div>\r\n                <div className=\"LoginBox\">\r\n                    <form onSubmit={(e) => SaveToDB(e)}>\r\n                        <div>\r\n                            <input type=\"radio\" id=\"male\" name=\"gender\" value=\"Dad\" required />\r\n                            <label htmlFor=\"male\">Dad</label>\r\n                            <input type=\"radio\" id=\"female\" name=\"gender\" value=\"Mom\" required />\r\n                            <label htmlFor=\"female\">Mom</label>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"uname\"><b>systolic:</b></label>\r\n                            <br></br>\r\n                            <input type=\"number\" id=\"systolic\" placeholder=\"systolic\" name=\"systolic\" required />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"psw\"><b>diastolic:</b></label>\r\n                            <br></br>\r\n                            <input type=\"number\" id=\"diastolic\" placeholder=\"diastolic\" name=\"diastolic\" required />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"psw\"><b>Heart rate:</b></label>\r\n                            <br></br>\r\n                            <input type=\"number\" id=\"HeartRate\" placeholder=\"Heart rate\" name=\"HeartRate\" required />\r\n                        </div>\r\n                        <br></br>\r\n                        <input className=\"button\" type=\"submit\" value=\"Send Result\"></input>\r\n                        <br></br>\r\n                        <br></br>\r\n                        <button className=\"button\" type=\"\" value=\"Results\" onClick={() => {\r\n                            history.push('/Table')\r\n                        }}> Results</button>\r\n                    </form>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </body>\r\n    )\r\n\r\n    function SaveToDB(e) {\r\n        e.preventDefault();\r\n         let systolic = e.target.systolic.value;\r\n        let diastolic = e.target.diastolic.value;\r\n        let HeartRate = e.target.HeartRate.value;\r\n        let radio = e.target.gender.value;\r\n         fetch('/addBloodPressure', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    systolic: systolic,\r\n                    diastolic: diastolic,\r\n                    HeartRate: HeartRate,\r\n                    radio: radio\r\n                })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                \r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n\r\n\r\n\r\n}","import React, { useEffect, useState, upvotes } from 'react';\r\nimport './Table.css';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useHistory\r\n} from \"react-router-dom\"\r\n\r\nexport default function Login() {\r\n    let history = useHistory();\r\n    const [DataForTable, setTDataForTable] = useState([]);\r\n    useEffect(() => {\r\n        fetch(\"/getAllData\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                let doc = data;\r\n                 setTDataForTable(doc[0]);\r\n            });\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className='TableForm' >\r\n                <body>\r\n                    <div className=\"\">\r\n                        <br></br>\r\n                        <select name=\"SelectDadMom\" onChange={(e) => getNewData(e)}>\r\n                            <option value=\"All\">All</option>\r\n                            <option value=\"Dad\">Dad</option>\r\n                            <option value=\"Mom\">Mom</option>\r\n                        </select>\r\n                        <button className=\"button\" type=\"\" value=\"MainPage\" onClick={() => {\r\n                            history.push('/MainPage')\r\n                        }}> Back</button>\r\n                    </div>\r\n                    <div className=\"TableToShow\">\r\n                        <table  className=\"table\" >\r\n                            <thead className=\"header__table\">\r\n                                <tr>\r\n                                    <th scope=\"col\"> Dad/Mom </th>\r\n                                    <th scope=\"col\"> systolic </th>\r\n                                    <th scope=\"col\"> diastolic </th>\r\n                                    <th scope=\"col\"> Heart rate </th>\r\n                                    <th scope=\"col\"> Date </th>\r\n                                    <th scope=\"col\"> Time </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"tbody\">\r\n                                {DataForTable.map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td> {data.radio} </td>\r\n                                        <td> {data.systolic} </td>\r\n                                        <td> {data.diastolic} </td>\r\n                                        <td> {data.HeartRate} </td>\r\n                                        <td> {data.Date} </td>\r\n                                        <td> {data.Time} </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n\r\n\r\n                    </div>\r\n\r\n                </body>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n    function getNewData(e) {\r\n        e.preventDefault();\r\n        var selectElement = e.target;\r\n        var value = selectElement.value;\r\n        fetch('/getNewDataWithFillters', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    value: value,\r\n                 })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                 setTDataForTable(data[0])\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n}","import React, { useState } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Login from './view/components/login/login';\r\nimport Register from './view/components/Register/Register';\r\nimport MainPage from './view/components/MainPage/MainPage'\r\nimport Table from './view/components/Table/Table'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useHistory\r\n} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  let history = useHistory();\r\n\r\n  return (\r\n\r\n    <Router>\r\n    <div className='app'>\r\n      {/* A <Switch> looks through its children <Route>s and\r\n          renders the first one that matches the current URL. */}\r\n      <Switch>\r\n      <Route path=\"/MainPage\">\r\n          <MainPage />\r\n        </Route>\r\n        <Route path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route path=\"/Register\">\r\n          <Register />\r\n        </Route>\r\n        <Route path=\"/Table\">\r\n          <Table />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <MainPage />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n);\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className='page'>\r\n      <h2>Home</h2>\r\n    </div>\r\n  )\r\n}\r\nfunction About() {\r\n  let history = useHistory();\r\n  return (\r\n    <div className='page'>\r\n      <h2>About</h2>\r\n      <div onClick={()=>{\r\n        history.push('/')\r\n      }}>Go to home</div>\r\n    </div>\r\n  )\r\n}\r\nfunction Users() {\r\n  return (\r\n    <div className='page'>\r\n      <h2>Users</h2>\r\n      <Link to=\"/about\"><div>Go to about</div></Link>\r\n    </div>\r\n  )\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}